{"version":3,"sources":["redux/language.js","redux/screens.js","redux/numberStatus.js","redux/index.js","components/Language.js","function/request.js","components/AuthorizationFrom.js","components/DataDisplayForm.js","components/NumberCheckForm.js","screens/Authorization.js","App.js","serviceWorker.js","index.js"],"names":["Language","state","action","type","Screen","payload","numberStatus","combineReducers","language","screen","styles","borderBottom","borderBottomColor","props","setUk","style","setRus","Navbar","bg","variant","Collapse","className","Text","onClick","setLanguage","this","React","Component","connect","dispatch","signIn","login","password","a","axios","post","checkNumber","number","AuthorizationFrom","Send","event","preventDefault","request","data","status","checkScreen","setState","error","errorText","userNotFound","setAlert","Alert","send","color","disabled","bind","prevState","length","Jumbotron","fluid","backgroundColor","icon","faUserCircle","size","comeIn","Form","Group","controlId","Control","placeholder","value","onChange","e","target","Button","next","DataDisplayForm","setStatus","store","statusNumber","blocked","active","borderRadius","marginLeft","back","LogOff","NumberCheckForm","tel","addNumberStatus","maxLength","check","Authorization","setScreen","windowHeight","window","innerHeight","Container","height","createStore","Reducer","composeWithDevTools","applyMiddleware","thunk","App","subscribe","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.96d0a48f.chunk.js","sourcesContent":["const initialState = 'uk';\r\n\r\nconst Language = (state = initialState, action) => {\r\n    if (action.type === 'UK') {\r\n        return 'uk';\r\n    } else if (action.type === 'RU') {\r\n        return 'rus';\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default Language;\r\n","const initialState = 'AUTH';\r\n\r\nconst Screen = (state = initialState, action) => {\r\n    if (action.type === 'CHECK_SCREEN') {\r\n        return action.payload;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default Screen;\r\n","const initialState = null;\r\n\r\nconst numberStatus = (state = initialState, action) => {\r\n    if (action.type === 'ADD_NUMBER_STATUS') {\r\n        return action.payload;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default numberStatus;\r\n","import {combineReducers} from 'redux';\r\nimport language from './language';\r\nimport screen from './screens';\r\nimport numberStatus from './numberStatus';\r\n\r\nexport default combineReducers({\r\n    language,\r\n    screen,\r\n    numberStatus,\r\n});\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Navbar} from 'react-bootstrap';\r\n\r\nconst styles = {\r\n    borderBottom:  \"2px solid currentColor\",\r\n    borderBottomColor: \"yellow\"\r\n}\r\n\r\nclass Language extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    setUk = () => {\r\n        if (this.props.language === \"uk\") {\r\n            return (\r\n                <b style={styles}> Укр </b>\r\n            )\r\n        }\r\n        return \"Укр\"\r\n    }\r\n\r\n    setRus = () => {\r\n        if (this.props.language === \"rus\") {\r\n           return (\r\n               <b style={styles}> Рус </b>\r\n           )\r\n        }\r\n        return \"Рус\"\r\n    }\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"#CCCCCC\" variant=\"#CCCCCC\">\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text onClick={() => {\r\n                        this.props.setLanguage('UK')\r\n\r\n                    }}>\r\n                        {this.setUk()}\r\n                    </Navbar.Text>\r\n                    <Navbar.Text>\r\n                        &emsp;\r\n                    </Navbar.Text>\r\n                    <Navbar.Text onClick={() => {\r\n                        this.props.setLanguage('RU')\r\n                    }}>\r\n                        {this.setRus()}\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        language: state.language\r\n    }),\r\n    (dispatch) => ({\r\n        setLanguage: (language) => {\r\n            dispatch({type: language});\r\n        },\r\n    }),\r\n)(Language);\r\n","import axios from 'axios';\r\n\r\nconst url = \"http://localhost:8000\";\r\n\r\nexport const signIn = async (login, password) => {\r\n    return await axios.post('/authorization', {\r\n        login,\r\n        password\r\n    });\r\n}\r\n\r\nexport const checkNumber = async (number) => {\r\n    return await axios.post('/checkNumber', {\r\n        number,\r\n    });\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Form, Button, Jumbotron, Alert} from 'react-bootstrap';\r\nimport language from \"../language.json\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport {signIn} from \"../function/request\";\r\n\r\nclass AuthorizationFrom extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            login: '',\r\n            password: '',\r\n            send: false,\r\n            color: 'light',\r\n            disabled: true,\r\n            error: false,\r\n            errorText: \"\",\r\n        }\r\n        this.Send = this.Send.bind(this);\r\n    }\r\n\r\n    Send = async (event) => {\r\n        event.preventDefault();\r\n        const request = await signIn(this.state.login, this.state.password);\r\n        if (request.data.status === 200) {\r\n            this.props.checkScreen('CHECK_NUM');\r\n            this.setState({error: false})\r\n        } else  if (request.data.status === 401) {\r\n            this.setState({error: true, errorText: language[this.props.language].userNotFound})\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (!this.state.send) {\r\n            if (this.state.login.length > 3 && this.state.password.length > 6) {\r\n                this.setState({\r\n                    send: true, disabled: false,\r\n                })\r\n            }\r\n        } else  if (this.state.send) {\r\n            if (this.state.login.length < 3 && this.state.password.length < 6) {\r\n                this.setState({\r\n                    send: false, disabled: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    setAlert = () => {\r\n        if (this.state.error) {\r\n            return (\r\n                <Alert variant={'danger'}\r\n                       className=\"col-xs-8 offset-xs-2 col-sm-8 offset-sm-2 col-md-6 offset-md-3\r\n                    col-lg-4 offset-lg-4 col-xl-10 offset-xl-1\">\r\n                    {this.state.errorText}\r\n                </Alert>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Jumbotron fluid style={{backgroundColor: '#ffffff'}} className=\"col-xs-12 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 col-xl-4 offset-xl-4\">\r\n                <FontAwesomeIcon icon={faUserCircle} size='10x' color='orange' className=\" col-xs-8 offset-xs-2 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 col-xl-4 offset-xl-4\"/>\r\n                <h1 className=\"col-xs-8 offset-xs-2 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 col-xl-4 offset-xl-4\">{language[this.props.language].comeIn}</h1>\r\n            <Form>\r\n                <Form.Group controlId=\"login\" className=\"col-xs-10 offset-xs-1 col-sm-10 offset-sm-1 col-md-10 offset-md-1 col-lg-10 offset-lg-1 col-xl-10 offset-xl-1\">\r\n                    <Form.Control type=\"text\" placeholder={language[this.props.language].login} value={this.state.login} onChange={(e) => {\r\n                        this.setState({login: e.target.value})\r\n                    }}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Password\" className=\"col-xs-10 offset-xs-1 col-sm-10 offset-sm-1 col-md-10 offset-md-1 col-lg-10 offset-lg-1 col-xl-10 offset-xl-1\">\r\n                    <Form.Control type=\"password\" placeholder={language[this.props.language].password} value={this.state.password} onChange={(e) => {\r\n                        this.setState({password: e.target.value})\r\n                    }} />\r\n                </Form.Group>\r\n                {this.setAlert()}\r\n                <Button variant=\"primary\" type=\"submit\" variant={this.state.color}  onClick={this.Send} onMouseOver={() => {\r\n                    this.setState({color: 'warning'})}} onMouseOut={() => {this.setState({color: 'light'})}} disabled={this.state.disabled}\r\n                        className=\"col-xs-12 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 col-xl-4 offset-xl-4 \">\r\n                    {language[this.props.language].next}\r\n                </Button>\r\n            </Form>\r\n            </Jumbotron>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        language: state.language\r\n    }),\r\n    (dispatch) => ({\r\n        checkScreen: (screen) => {\r\n            dispatch({type: 'CHECK_SCREEN', payload: screen});\r\n        },\r\n    }),\r\n)(AuthorizationFrom);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Button, Jumbotron} from 'react-bootstrap';\r\nimport language from \"../language.json\";\r\n\r\nclass DataDisplayForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    setStatus = () => {\r\n        let color, status;\r\n        if (this.props.store.statusNumber === 'subscriber is blocked') {\r\n            color = 'red';\r\n            status =  language[this.props.language].blocked;\r\n        } else if(this.props.store.statusNumber === 'active') {\r\n            color = 'green';\r\n            status =  language[this.props.language].active;\r\n        }\r\n        return (\r\n            <p style={{color: color}}>\r\n                {language[this.props.language].number} {this.props.store.number}. {status}\r\n            </p>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Jumbotron fluid style={{backgroundColor: '#ffffff', borderRadius: '5px'}} className=\"col-xs-12 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 col-xl-4 offset-xl-4\">\r\n                <div style={{backgroundColor: '#ECECEC', borderRadius: '5px'}} className=\"col-xs-10 offset-xs-1 col-sm-10 offset-sm-1 col-md-10 offset-md-1 col-lg-10 offset-lg-1 col-xl-10 offset-xl-1\">\r\n                    {this.setStatus()}\r\n                </div>\r\n                <Button variant=\"link\" style={{marginLeft: '30px'}} onClick={() => {\r\n                    this.props.checkScreen('CHECK_NUM');\r\n                }}>{language[this.props.language].back}</Button>\r\n                <Button variant=\"link\" style={{marginLeft: '300px'}} onClick={() => {\r\n                    this.props.checkScreen('AUTH');\r\n                }}>{language[this.props.language].LogOff}</Button>\r\n            </Jumbotron>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        store: state.numberStatus,\r\n        language: state.language\r\n    }),\r\n    (dispatch) => ({\r\n        checkScreen: (screen) => {\r\n            dispatch({type: 'CHECK_SCREEN', payload: screen});\r\n        },\r\n    }),\r\n)(DataDisplayForm);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Form, Button, Jumbotron, Alert} from 'react-bootstrap';\r\nimport language from \"../language.json\";\r\nimport {checkNumber} from \"../function/request\";\r\n\r\nclass NumberCheckForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tel: '+(380)',\r\n            send: false,\r\n            color: 'light',\r\n            disabled: true,\r\n            error: false,\r\n        }\r\n        this.Send = this.Send.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.store) {\r\n            this.setState({\r\n                tel: this.props.store.number\r\n            })\r\n        }\r\n    }\r\n\r\n    Send = async (event) => {\r\n        event.preventDefault();\r\n        const request = await checkNumber(this.state.tel);\r\n        if (request.data.status === 200) {\r\n            this.props.addNumberStatus(request.data);\r\n            this.props.checkScreen('DISPLAY_DATA');\r\n        } else {\r\n            this.setState({error: true});\r\n        }\r\n    }\r\n\r\n    setAlert = () => {\r\n        if (this.state.error) {\r\n            return (\r\n                <Alert variant={'danger'}\r\n                       className=\"col-xs-8 offset-xs-2 col-sm-8 offset-sm-2 col-md-6 offset-md-3\r\n                    col-lg-4 offset-lg-4 col-xl-10 offset-xl-1\">\r\n                    Введите корректный номер!\r\n                </Alert>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (!this.state.send) {\r\n            if (this.state.tel.length === 15) {\r\n                this.setState({\r\n                    send: true, disabled: false,\r\n                })\r\n            }\r\n        } else  if (this.state.send) {\r\n            if (this.state.tel.length < 15) {\r\n                this.setState({\r\n                    send: false, disabled: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Jumbotron fluid style={{backgroundColor: '#ffffff'}} className=\"col-xs-12 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 col-xl-4 offset-xl-4\">\r\n                <h6 className=\"col-xs-8 offset-xs-2 col-sm-8 offset-sm-2 col-md-8 offset-md-2 col-lg-8 offset-lg-2 col-xl-8 offset-xl-2\">{language[this.props.language].checkNumber}</h6>\r\n                <Form>\r\n                    <Form.Group controlId=\"number\" className=\"col-xs-10 offset-xs-1 col-sm-10 offset-sm-1 col-md-10 offset-md-1 col-lg-10 offset-lg-1 col-xl-10 offset-xl-1\">\r\n                        <Form.Control type=\"tel\" maxLength=\"15\" placeholder=\"+(380) ___ __ __\" value={this.state.tel} onChange={(e) => {\r\n                            if (e.target.value.length >= 6) {\r\n                                this.setState({tel: e.target.value})\r\n                            }\r\n                        }}/>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\" variant={this.state.color}  onClick={this.Send}\r\n                            className=\"col-xs-12 col-sm-8 offset-sm-2 col-md-6 offset-md-3 col-lg-4 offset-lg-4 col-xl-4 offset-xl-4\"\r\n                            onMouseOver={() => {\r\n                        this.setState({color: 'warning'})}} onMouseOut={() => {this.setState({color: 'light'})}} disabled={this.state.disabled} >\r\n                        {language[this.props.language].check}\r\n                    </Button>\r\n                </Form>\r\n            </Jumbotron>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        store: state.numberStatus,\r\n        language: state.language\r\n    }),\r\n    (dispatch) => ({\r\n        checkScreen: (screen) => {\r\n            dispatch({type: 'CHECK_SCREEN', payload: screen});\r\n        },\r\n        addNumberStatus: (status) => {\r\n            dispatch({type: 'ADD_NUMBER_STATUS', payload: status});\r\n        },\r\n    }),\r\n)(NumberCheckForm);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Language from \"../components/Language\";\r\nimport AuthorizationFrom from \"../components/AuthorizationFrom\";\r\nimport {Container} from 'react-bootstrap';\r\nimport DataDisplayForm from \"../components/DataDisplayForm\";\r\nimport NumberCheckForm from \"../components/NumberCheckForm\";\r\n\r\nclass Authorization extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    setScreen = () => {\r\n        if (this.props.screen === 'AUTH') {\r\n            return <AuthorizationFrom />\r\n        } else if (this.props.screen === 'CHECK_NUM') {\r\n            return <NumberCheckForm />\r\n        } else if (this.props.screen === 'DISPLAY_DATA') {\r\n            return <DataDisplayForm />\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const windowHeight = window.innerHeight;\r\n        return (\r\n            <Container fluid style={{backgroundColor: '#CCCCCC',height: `${windowHeight}px`}}>\r\n                <Language />\r\n                {this.setScreen()}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        screen: state.screen,\r\n    }),\r\n    (dispatch) => ({\r\n        checkScreen: (screen) => {\r\n            dispatch({type: 'CHECK_SCREEN', payload: screen});\r\n        },\r\n    }),\r\n)(Authorization);\r\n","import React from \"react\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {Provider} from 'react-redux';\r\nimport Reducer from './redux/index';\r\nimport Authorization from \"./screens/Authorization\";\r\n\r\nconst store = createStore(Reducer, composeWithDevTools(applyMiddleware(thunk)));\r\nstore.subscribe(() => {\r\n    // console.log('store', store.getState());\r\n});\r\n\r\n\r\nexport default function App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <Authorization />\r\n        </Provider>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}